/*!
 *  Copyright (c) 2018 by Contributors
 * \file endian_detection.h
 * \brief Endian detection logic for multiple platforms
 *    You should probably use CMake to reliably detect endianness,
 *    but this file is provided in case you don't have access
 *    to CMake.
 */
#ifndef DMLC_ENDIAN_DETECTION_H_
#define DMLC_ENDIAN_DETECTION_H_

/* 
 * The following endian detection logic was taken from Boost Library
 * in accordance with the Boost Software License Version 1.0.
 *
 * Source: https://www.boost.org/doc/libs/1_54_0/boost/detail/endian.hpp
 *
 * Full text of Boost Software License Version 1.0
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#if defined(__APPLE__) || defined(_WIN32)
  #define DMLC_LITTLE_ENDIAN 1
#elif defined (__GLIBC__)
  // GNU libc offers the helpful header <endian.h> which defines __BYTE_ORDER
  #include <endian.h>
  #define DMLC_LITTLE_ENDIAN (__BYTE_ORDER == __LITTLE_ENDIAN)
#elif defined(__NetBSD__) || defined(__FreeBSD__) ||  \
      defined(__OpenBSD__) || (__DragonFly__)  // BSDs
  #if defined(__OpenBSD__)
    #include <machine/endian.h>
  #else
    #include <sys/endian.h>
  #endif
  #define DMLC_LITTLE_ENDIAN (_BYTE_ORDER == _LITTLE_ENDIAN)
#elif defined(__ANDROID__)  // Android
  #include "machine/_types.h"
  #ifdef __ARMEB__
    #define DMLC_LITTLE_ENDIAN 0
  #else
    #define DMLC_LITTLE_ENDIAN 1
  #endif
#else
  #error "Unable to determine endianness of your machine; use CMake to compile"
#endif

#endif  // DMLC_ENDIAN_DETECTION_H_
